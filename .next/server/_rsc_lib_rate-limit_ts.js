"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_rate-limit_ts";
exports.ids = ["_rsc_lib_rate-limit_ts"];
exports.modules = {

/***/ "(rsc)/./lib/rate-limit.ts":
/*!***************************!*\
  !*** ./lib/rate-limit.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAllowedAndConsume: () => (/* binding */ isAllowedAndConsume)\n/* harmony export */ });\nconst memoryCounter = new Map();\nasync function tryUpstash(opts) {\n    const url = process.env.UPSTASH_REDIS_REST_URL;\n    const token = process.env.UPSTASH_REDIS_REST_TOKEN;\n    if (!url || !token) return null;\n    try {\n        const nowSec = Math.floor(Date.now() / 1000);\n        const expireAt = nowSec + opts.windowSeconds;\n        const res = await fetch(`${url}/pipeline`, {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify([\n                [\n                    \"INCR\",\n                    opts.key\n                ],\n                [\n                    \"EXPIRE\",\n                    opts.key,\n                    String(opts.windowSeconds),\n                    \"NX\"\n                ],\n                [\n                    \"GET\",\n                    opts.key\n                ],\n                [\n                    \"EXPIREAT\",\n                    `${opts.key}:exp`,\n                    String(expireAt)\n                ]\n            ])\n        });\n        if (!res.ok) return null;\n        const data = await res.json();\n        // Pipeline returns array of results; the third command 'GET' returns string count\n        const countStr = Array.isArray(data) && data.length >= 3 ? data[2]?.result ?? data[2] : null;\n        const count = Number(countStr);\n        if (!Number.isFinite(count)) return null;\n        return count <= opts.limit;\n    } catch  {\n        return null;\n    }\n}\nfunction tryMemory(opts) {\n    const now = Date.now();\n    const entry = memoryCounter.get(opts.key);\n    if (!entry || entry.expiresAt <= now) {\n        memoryCounter.set(opts.key, {\n            count: 1,\n            expiresAt: now + opts.windowSeconds * 1000\n        });\n        return true;\n    }\n    entry.count += 1;\n    return entry.count <= opts.limit;\n}\nasync function isAllowedAndConsume(opts) {\n    const upstash = await tryUpstash(opts);\n    if (typeof upstash === \"boolean\") return upstash;\n    return tryMemory(opts);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvcmF0ZS1saW1pdC50cyIsIm1hcHBpbmdzIjoiOzs7O0FBTUEsTUFBTUEsZ0JBQW1FLElBQUlDO0FBRTdFLGVBQWVDLFdBQVdDLElBQXNCO0lBQzlDLE1BQU1DLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQ0Msc0JBQXNCO0lBQzlDLE1BQU1DLFFBQVFILFFBQVFDLEdBQUcsQ0FBQ0csd0JBQXdCO0lBQ2xELElBQUksQ0FBQ0wsT0FBTyxDQUFDSSxPQUFPLE9BQU87SUFDM0IsSUFBSTtRQUNGLE1BQU1FLFNBQVNDLEtBQUtDLEtBQUssQ0FBQ0MsS0FBS0MsR0FBRyxLQUFLO1FBQ3ZDLE1BQU1DLFdBQVdMLFNBQVNQLEtBQUthLGFBQWE7UUFDNUMsTUFBTUMsTUFBTSxNQUFNQyxNQUFNLENBQUMsRUFBRWQsSUFBSSxTQUFTLENBQUMsRUFBRTtZQUN6Q2UsUUFBUTtZQUNSQyxTQUFTO2dCQUFFLGlCQUFpQixDQUFDLE9BQU8sRUFBRVosTUFBTSxDQUFDO2dCQUFFLGdCQUFnQjtZQUFtQjtZQUNsRmEsTUFBTUMsS0FBS0MsU0FBUyxDQUFDO2dCQUNuQjtvQkFBQztvQkFBUXBCLEtBQUtxQixHQUFHO2lCQUFDO2dCQUNsQjtvQkFBQztvQkFBVXJCLEtBQUtxQixHQUFHO29CQUFFQyxPQUFPdEIsS0FBS2EsYUFBYTtvQkFBRztpQkFBSztnQkFDdEQ7b0JBQUM7b0JBQU9iLEtBQUtxQixHQUFHO2lCQUFDO2dCQUNqQjtvQkFBQztvQkFBWSxDQUFDLEVBQUVyQixLQUFLcUIsR0FBRyxDQUFDLElBQUksQ0FBQztvQkFBRUMsT0FBT1Y7aUJBQVU7YUFDbEQ7UUFDSDtRQUNBLElBQUksQ0FBQ0UsSUFBSVMsRUFBRSxFQUFFLE9BQU87UUFDcEIsTUFBTUMsT0FBTyxNQUFNVixJQUFJVyxJQUFJO1FBQzNCLGtGQUFrRjtRQUNsRixNQUFNQyxXQUFXQyxNQUFNQyxPQUFPLENBQUNKLFNBQVNBLEtBQUtLLE1BQU0sSUFBSSxJQUFJTCxJQUFJLENBQUMsRUFBRSxFQUFFTSxVQUFVTixJQUFJLENBQUMsRUFBRSxHQUFHO1FBQ3hGLE1BQU1PLFFBQVFDLE9BQU9OO1FBQ3JCLElBQUksQ0FBQ00sT0FBT0MsUUFBUSxDQUFDRixRQUFRLE9BQU87UUFDcEMsT0FBT0EsU0FBUy9CLEtBQUtrQyxLQUFLO0lBQzVCLEVBQUUsT0FBTTtRQUNOLE9BQU87SUFDVDtBQUNGO0FBRUEsU0FBU0MsVUFBVW5DLElBQXNCO0lBQ3ZDLE1BQU1XLE1BQU1ELEtBQUtDLEdBQUc7SUFDcEIsTUFBTXlCLFFBQVF2QyxjQUFjd0MsR0FBRyxDQUFDckMsS0FBS3FCLEdBQUc7SUFDeEMsSUFBSSxDQUFDZSxTQUFTQSxNQUFNRSxTQUFTLElBQUkzQixLQUFLO1FBQ3BDZCxjQUFjMEMsR0FBRyxDQUFDdkMsS0FBS3FCLEdBQUcsRUFBRTtZQUFFVSxPQUFPO1lBQUdPLFdBQVczQixNQUFNWCxLQUFLYSxhQUFhLEdBQUc7UUFBSztRQUNuRixPQUFPO0lBQ1Q7SUFDQXVCLE1BQU1MLEtBQUssSUFBSTtJQUNmLE9BQU9LLE1BQU1MLEtBQUssSUFBSS9CLEtBQUtrQyxLQUFLO0FBQ2xDO0FBRU8sZUFBZU0sb0JBQW9CeEMsSUFBc0I7SUFDOUQsTUFBTXlDLFVBQVUsTUFBTTFDLFdBQVdDO0lBQ2pDLElBQUksT0FBT3lDLFlBQVksV0FBVyxPQUFPQTtJQUN6QyxPQUFPTixVQUFVbkM7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXVyYWxpZnQvLi9saWIvcmF0ZS1saW1pdC50cz8yMmM4Il0sInNvdXJjZXNDb250ZW50IjpbInR5cGUgUmF0ZUxpbWl0T3B0aW9ucyA9IHtcbiAga2V5OiBzdHJpbmc7XG4gIGxpbWl0OiBudW1iZXI7XG4gIHdpbmRvd1NlY29uZHM6IG51bWJlcjtcbn07XG5cbmNvbnN0IG1lbW9yeUNvdW50ZXI6IE1hcDxzdHJpbmcsIHsgY291bnQ6IG51bWJlcjsgZXhwaXJlc0F0OiBudW1iZXIgfT4gPSBuZXcgTWFwKCk7XG5cbmFzeW5jIGZ1bmN0aW9uIHRyeVVwc3Rhc2gob3B0czogUmF0ZUxpbWl0T3B0aW9ucyk6IFByb21pc2U8Ym9vbGVhbiB8IG51bGw+IHtcbiAgY29uc3QgdXJsID0gcHJvY2Vzcy5lbnYuVVBTVEFTSF9SRURJU19SRVNUX1VSTDtcbiAgY29uc3QgdG9rZW4gPSBwcm9jZXNzLmVudi5VUFNUQVNIX1JFRElTX1JFU1RfVE9LRU47XG4gIGlmICghdXJsIHx8ICF0b2tlbikgcmV0dXJuIG51bGw7XG4gIHRyeSB7XG4gICAgY29uc3Qgbm93U2VjID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgY29uc3QgZXhwaXJlQXQgPSBub3dTZWMgKyBvcHRzLndpbmRvd1NlY29uZHM7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7dXJsfS9waXBlbGluZWAsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogeyAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0b2tlbn1gLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShbXG4gICAgICAgIFsnSU5DUicsIG9wdHMua2V5XSxcbiAgICAgICAgWydFWFBJUkUnLCBvcHRzLmtleSwgU3RyaW5nKG9wdHMud2luZG93U2Vjb25kcyksICdOWCddLFxuICAgICAgICBbJ0dFVCcsIG9wdHMua2V5XSxcbiAgICAgICAgWydFWFBJUkVBVCcsIGAke29wdHMua2V5fTpleHBgLCBTdHJpbmcoZXhwaXJlQXQpXSxcbiAgICAgIF0pXG4gICAgfSk7XG4gICAgaWYgKCFyZXMub2spIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICAgIC8vIFBpcGVsaW5lIHJldHVybnMgYXJyYXkgb2YgcmVzdWx0czsgdGhlIHRoaXJkIGNvbW1hbmQgJ0dFVCcgcmV0dXJucyBzdHJpbmcgY291bnRcbiAgICBjb25zdCBjb3VudFN0ciA9IEFycmF5LmlzQXJyYXkoZGF0YSkgJiYgZGF0YS5sZW5ndGggPj0gMyA/IGRhdGFbMl0/LnJlc3VsdCA/PyBkYXRhWzJdIDogbnVsbDtcbiAgICBjb25zdCBjb3VudCA9IE51bWJlcihjb3VudFN0cik7XG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoY291bnQpKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gY291bnQgPD0gb3B0cy5saW1pdDtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJ5TWVtb3J5KG9wdHM6IFJhdGVMaW1pdE9wdGlvbnMpOiBib29sZWFuIHtcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgY29uc3QgZW50cnkgPSBtZW1vcnlDb3VudGVyLmdldChvcHRzLmtleSk7XG4gIGlmICghZW50cnkgfHwgZW50cnkuZXhwaXJlc0F0IDw9IG5vdykge1xuICAgIG1lbW9yeUNvdW50ZXIuc2V0KG9wdHMua2V5LCB7IGNvdW50OiAxLCBleHBpcmVzQXQ6IG5vdyArIG9wdHMud2luZG93U2Vjb25kcyAqIDEwMDAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZW50cnkuY291bnQgKz0gMTtcbiAgcmV0dXJuIGVudHJ5LmNvdW50IDw9IG9wdHMubGltaXQ7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpc0FsbG93ZWRBbmRDb25zdW1lKG9wdHM6IFJhdGVMaW1pdE9wdGlvbnMpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgY29uc3QgdXBzdGFzaCA9IGF3YWl0IHRyeVVwc3Rhc2gob3B0cyk7XG4gIGlmICh0eXBlb2YgdXBzdGFzaCA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gdXBzdGFzaDtcbiAgcmV0dXJuIHRyeU1lbW9yeShvcHRzKTtcbn1cblxuXG4iXSwibmFtZXMiOlsibWVtb3J5Q291bnRlciIsIk1hcCIsInRyeVVwc3Rhc2giLCJvcHRzIiwidXJsIiwicHJvY2VzcyIsImVudiIsIlVQU1RBU0hfUkVESVNfUkVTVF9VUkwiLCJ0b2tlbiIsIlVQU1RBU0hfUkVESVNfUkVTVF9UT0tFTiIsIm5vd1NlYyIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJleHBpcmVBdCIsIndpbmRvd1NlY29uZHMiLCJyZXMiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImtleSIsIlN0cmluZyIsIm9rIiwiZGF0YSIsImpzb24iLCJjb3VudFN0ciIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsInJlc3VsdCIsImNvdW50IiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJsaW1pdCIsInRyeU1lbW9yeSIsImVudHJ5IiwiZ2V0IiwiZXhwaXJlc0F0Iiwic2V0IiwiaXNBbGxvd2VkQW5kQ29uc3VtZSIsInVwc3Rhc2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/rate-limit.ts\n");

/***/ })

};
;