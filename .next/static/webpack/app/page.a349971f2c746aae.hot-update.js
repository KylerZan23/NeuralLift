"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureAuthOrStartOAuth: function() { return /* binding */ ensureAuthOrStartOAuth; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./lib/supabase.ts\");\n\nasync function ensureAuthOrStartOAuth(redirectTo) {\n    const supabase = (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabaseClient)();\n    const { data } = await supabase.auth.getUser();\n    if (data.user) return \"proceeded\";\n    var _process_env_NEXT_PUBLIC_BASE_URL;\n    const base = (_process_env_NEXT_PUBLIC_BASE_URL = \"http://localhost:3000\") !== null && _process_env_NEXT_PUBLIC_BASE_URL !== void 0 ? _process_env_NEXT_PUBLIC_BASE_URL :  true ? window.location.origin : 0;\n    // Prefer popup flow so we don't navigate away from the landing page\n    try {\n        let popup = null;\n        if (true) {\n            const width = 600;\n            const height = 700;\n            const left = window.screenX + Math.max(0, (window.outerWidth - width) / 2);\n            const top = window.screenY + Math.max(0, (window.outerHeight - height) / 2);\n            // Open a blank popup synchronously to avoid popup blockers\n            popup = window.open(\"about:blank\", \"neuralift_google_oauth\", \"toolbar=0,location=0,menubar=0,scrollbars=1,resizable=1,width=\".concat(width, \",height=\").concat(height, \",top=\").concat(top, \",left=\").concat(left));\n        }\n        const { data: oauthData } = await supabase.auth.signInWithOAuth({\n            provider: \"google\",\n            options: base ? {\n                redirectTo: \"\".concat(base).concat(redirectTo),\n                skipBrowserRedirect: true\n            } : {\n                skipBrowserRedirect: true\n            }\n        });\n        const url = oauthData === null || oauthData === void 0 ? void 0 : oauthData.url;\n        if ( true && url) {\n            if (popup && !popup.closed) {\n                try {\n                    popup.location.href = url;\n                } catch (e) {\n                    popup = window.open(url, \"neuralift_google_oauth\");\n                }\n            } else {\n                popup = window.open(url, \"neuralift_google_oauth\");\n            }\n            return await new Promise((resolve)=>{\n                let settled = false;\n                const timeout = window.setTimeout(()=>{\n                    if (!settled) {\n                        settled = true;\n                        resolve(\"started_oauth\");\n                    }\n                }, 120000);\n                // Close watcher\n                const closeInterval = window.setInterval(async ()=>{\n                    if (!popup || popup.closed) {\n                        // Check if session exists now that popup is closed\n                        const { data: after } = await supabase.auth.getUser();\n                        if (!settled && after.user) {\n                            settled = true;\n                            window.clearTimeout(timeout);\n                            window.clearInterval(closeInterval);\n                            resolve(\"proceeded\");\n                        } else if (!settled && (!popup || (popup === null || popup === void 0 ? void 0 : popup.closed))) {\n                            settled = true;\n                            window.clearTimeout(timeout);\n                            window.clearInterval(closeInterval);\n                            resolve(\"started_oauth\");\n                        }\n                    }\n                }, 500);\n                const { data: sub } = supabase.auth.onAuthStateChange(async (event)=>{\n                    if (event === \"SIGNED_IN\" && !settled) {\n                        settled = true;\n                        try {\n                            popup === null || popup === void 0 ? void 0 : popup.close();\n                        } catch (e) {}\n                        window.clearTimeout(timeout);\n                        window.clearInterval(closeInterval);\n                        resolve(\"proceeded\");\n                    }\n                });\n                // Safety: clean up when promise settles\n                const finalize = (value)=>{\n                    try {\n                        var _sub_subscription_unsubscribe, _sub_subscription;\n                        sub === null || sub === void 0 ? void 0 : (_sub_subscription = sub.subscription) === null || _sub_subscription === void 0 ? void 0 : (_sub_subscription_unsubscribe = _sub_subscription.unsubscribe) === null || _sub_subscription_unsubscribe === void 0 ? void 0 : _sub_subscription_unsubscribe.call(_sub_subscription);\n                    } catch (e) {}\n                    try {\n                        popup === null || popup === void 0 ? void 0 : popup.close();\n                    } catch (e) {}\n                    return value;\n                };\n                // Wrap resolve to ensure cleanup\n                const originalResolve = resolve;\n                // @ts-expect-error\n                resolve = (v)=>originalResolve(finalize(v));\n            });\n        }\n    } catch (e) {}\n    // Fallback to full-page redirect if popup could not be opened\n    await supabase.auth.signInWithOAuth({\n        provider: \"google\",\n        options: base ? {\n            redirectTo: \"\".concat(base).concat(redirectTo)\n        } : undefined\n    });\n    return \"started_oauth\";\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/auth.ts\n"));

/***/ })

});